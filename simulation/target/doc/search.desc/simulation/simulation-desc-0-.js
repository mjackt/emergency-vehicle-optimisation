searchState.loadedDescShard("simulation", 0, "What is it?\nModule containg the Data struct and it’s associated …\nModule containing the DijkstraNode struct and it’s …\nModule containing all the functions related to the genetic …\nModule containg the Incident struct and it’s associated …\nRuns the entire GA process on input data pointed to by …\nModule containg the Node struct and it’s associated …\nModule contains methods focused on reading the input files …\nModule containing all methods related to the police …\nModule containg the Vehicle struct and it’s associated …\nUsed to store the results from an evaluation of a …\nThe average fitness of all solutions\nThe fitness value of the best solution\nThe solution that had the best overall fitness.\nFormats the struct by providing the average and best …\nReturns the argument unchanged.\nReturns a reference to the best solution\nCalls <code>U::from(self)</code>.\nReturns a new data object.\nA struct to store Dijkstra calculations for a Node.\nThe cost to reach the node.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe location of the node. Corresponds to OSM id.\nEvaluates a population of solutions and returns a Data …\nUniform crossover method for two solutions <code>a</code> and <code>b</code>. A …\nEvolves a population of solutions using:\nReturns a solution by randomly assigning a number of cars …\nMutates a given solution by “taking” a count from one …\nRandomly repairs a solution (if required), to ensure …\nReturns a list of indexes of the selected solutions after …\nRepresents an incident/crime that police vehicles can …\nThe time the incident was created.\nReturns the argument unchanged.\nReturns the creation time of the incident.\nReturns the incident’s [Node] ID.\nReturns the time the incident was resolved in <code>Some&lt;Time&gt;</code> …\nReturns the service time of the incident\nCalls <code>U::from(self)</code>.\nReturns a boolean specifying if the incident is already …\nReturns a boolean specifying if the incident is reachable …\nThe [Node] ID where the incident is taking place.\nReturns an Incident object.\nThe time between the incident’s creation time and the …\nHow long will the police need to attend the incident for …\nSets the incident as resolved.\nSets the incident as unreachable (invalid).\nIs the incident reachable. Some incidents may spawn in …\nThe number of police vehicles required to resolve the …\nRepresents a node on the graph.\nReturns the argument unchanged.\nReturns a reference to the list containing out costs.\nReturns a reference to the list of out IDs\nCalls <code>U::from(self)</code>.\nReturns a new Node object\nThe associated cost of travelling to each location in …\nThe IDs of nodes that can be reached by leaving this node.\nOBSOLETE\nReturns a HashMap of location IDs and Node objects using …\nReturns a list of all node IDs that are a police base. …\nReturns a list of the names of every police base. Uses …\nReturns a HashMap of locations and incident probabilites …\nCalculates travel time from source to target or uses cache.\nPerforms a dijkstra algorithm. Terminates after target is …\nDispatches vehicles to active incidents.\nEvaluates a solution.\nGenerates incidents based on probabilistic occurrence …\nRuns the simulation once.\nAdds incidents to the list of active ones. They are …\nCompletes a timestep on each vehicle\nAdds new calculation knowledge into the route cache\nA ID number which corresponds to a OSM node’s ID. There …\nA solution is comprised of a number of ints.\nA time value in seconds.\nRepresents a police vehicle that can navigate the graph …\nThe [Node] ID of the vehicle’s base.\nReturns the argument unchanged.\nReturns the node ID of the vehicle’s base\nReturns the travel_cost of the vehicle’s last travel.\nReturns the node ID of the vehicle’s current location.\nReturns the name of the vehcile\nReturns the number of seconds until the vehicle is free to …\nMoves the vehicle to a new node.\nCalls <code>U::from(self)</code>.\nA boolean that is ture if the last travel a vehicle made …\nReturns a boolean value indicating if the vehicle’s last …\nThe cost of the last travel the vehicle performed.\nThe [Node] ID of the vehcile’s current location.\nThe name of the vehicle. Only ever used for logging or …\nReturns a new Vehicle object\nResets the vehcile back to it’s base. The last_travel …\nThe amounts of seconds until the vehicle is free for new …\nReduces the <code>secs_till_free</code> attribute by the indicated …")